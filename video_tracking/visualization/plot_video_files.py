""" 

Plot the datetime of video files and their class


 """

import sys
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np

sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))
from lib.utils import query_postgres


def load_video_files():

    query = """ 
        SELECT * 
        FROM task_switch.video_files;
    """

    df = query_postgres(query)

    return df


def plot_markers(ax, df, y:int, videotype:str):
    """ Plot the datetimes of each video on a line with a particular y value """

    dt = df.session_dt.to_numpy()
    y = np.full_like(dt, y)

    ax.scatter(dt, y, s=1, label=videotype)

    print(f"n = {df.shape[0]} files")


def main():

    files = load_video_files()
    fig, ax = plt.subplots()

    # Show datetimes of files generated by the RV2
    rv2_files = files[files.rv2]
    plot_markers(ax, rv2_files, 2, 'RV2 Low exposure')
    files.drop(rv2_files.index, inplace=True)

    # Show datetimes of high exposure videos captured alongside RV2 videos
    he_copy_files = files[files.he_copy]
    plot_markers(ax, he_copy_files, 1, 'RV2 HE sibling')
    files.drop(he_copy_files.index, inplace=True)

    # Plot videos that have matlab files alongside (which hopefully contain frame times)    
    w_mat_file = files[files.mat_file]
    plot_markers(ax, w_mat_file, 4, 'Matlab frame times')
    files.drop(w_mat_file.index, inplace=True)

    # Plot whatever's left
    plot_markers(ax, files, 5, 'Other')
    print(files)    

    files[['ferret','block']].to_csv('/home/stephen/Desktop/problematic_videos.csv', index=False)

    ax.legend(loc="center left")
    plt.show()



if __name__ == '__main__':
    main()


